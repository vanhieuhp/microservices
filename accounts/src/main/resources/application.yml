server:
  port: 8001
  servlet:
    context-path: /api

db:
  host: "${DB_HOST:localhost}"
  port: "${DB_PORT:3306}"
  name: "${DB_NAME:accounts}"
  user: "${DB_USER:root}"
  password: "${DB_PASSWORD:password}"

# swagger-ui custom path
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
spring:
  application:
    name: accounts
  profiles:
    active: "prod"
  datasource:
    url: jdbc:mysql://${db.host}:${db.port}/${db.name}?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
    driverClassName: com.mysql.cj.jdbc.Driver
    username: ${db.user}
    password: ${db.password}
  jpa:
    database-platform: org.hibernate.dialect.MySQL8Dialect # Use MySQL8Dialect if you're on MySQL 8.x
    hibernate:
      ddl-auto: none
    show-sql: true
    properties:
      hibernate:
        format_sql: true
  flyway:
    url: jdbc:mysql://${db.host}:${db.port}/${db.name}?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
    user: ${db.user}
    password: ${db.password}
    schemas: ${db.name}
    default-schema: ${db.name}
    locations: classpath:db/migration
    table: flyway_schema_history_accounts
  config:
    import: "${SPRING_CLOUD_CONFIG_URL:optional:configserver:http://localhost:8071/}"
  rabbitmq:
    host: "${RABBITMQ_HOST:localhost}"
    port: "${RABBITMQ_PORT:5672}"
    username: "${RABBITMQ_USERNAME:guest}"
    password: "${RABBITMQ_PASSWORD:guest}"
    virtual-host: "${RABBITMQ_VIRTUAL_HOST:vh_host}"
    connection-timeout: 10s
  cloud:
    openfeign:
      circuitbreaker:
        enabled: true
    function:
      definition: updateCommunication
    stream:
      bindings:
        updateCommunication-in-0:
          destination: communication-sent
          group: "${spring.application.name}"
        sendCommunication-out-0:
          destination: send-communication
  logging:
    pattern:
      level: '%5p [${spring.application.name},%X{trace_id:-},%X{span_id:-},%threadName]'

info:
  app:
    name: "accounts"
    description: "Easy Bank Accounts Application"
    version: "1.0.0"

eureka:
  instance:
    prefer-ip-address: true
  client:
    fetchRegistry: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: ${EUREKA_SERVER_URL:http://localhost:8761/eureka/}

#logging:
#  level:
#    hieunv:
#      dev:
#        accounts: INFO
#  pattern:
#    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"



resilience4j.circuitbreaker:
    configs:
      default:
        sliding-window-size: 10
        permitted-number-of-calls-in-half-open-state: 2
        failure-rate-threshold: 50
        wait-duration-in-open-state: 10000

resilience4j.retry:
  configs:
    default:
      max-attempts: 3
      wait-duration: 500
      enable-exponential-backoff: true
      exponential-backoff-multiplier: 2
      ignore-exceptions:
        - java.lang.NullPointerException
      retry-exceptions:
        - java.util.concurrent.TimeoutException

resilience4j.ratelimiter:
    configs:
      default:
        timeout-duration: 1000
        limit-refresh-period: 5000
        limit-for-period: 1